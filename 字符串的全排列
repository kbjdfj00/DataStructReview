//思路：DFS递归，先固定第一个，然后求后面的全排列，然后第一个依次与后面的交换，然后再递归，要考虑重复的问题
//也可以不考虑，用set去重


class Solution {
public:
    vector<string> Permutation(string str) {
        vector<string> res;
        if(str.size()==0) return res;
        DFS(str,res,0);
        set<string> temp(res.begin(),res.end());
        res.assign(temp.begin(),temp.end());
        sort(res.begin(),res.end());
        return res;
    }
    
    void DFS(string str,vector<string> &res,int i){
        if(i==str.size()-1){
            res.push_back(str);
        }else{
            for(int j=i;j<str.size();j++){
                swap(str[i],str[j]);
                DFS(str,res,i+1);
                swap(str[i],str[j]);
            }
        }
    }
    
    void swap(char &a,char &b){
        char t=a;
        a=b;
        b=t;
    }
};
