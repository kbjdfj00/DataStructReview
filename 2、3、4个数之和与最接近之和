class Solution {
public:
     vector<vector<int>> twoSum(vector<int>& num, int start,int t) {
        
        int l=start,r=num.size()-1;
        vector<vector<int> > res;
        while(l<r){
            int left=num[l];
            int right=num[r];
            int sum=left+right;
            if(sum<t){
            while(l<num.size()&&num[l]==left) l++;
                }else if(sum>t){
                     while(r>=0&&num[r]==right) r--;
                }else{
                    res.push_back({left,right});
                 while(l<r&&num[l]==left) l++;
                 while(l<r&&num[r]==right) r--;
            }
        }
        return res;
    }


    vector<vector<int>> threeSum(vector<int>& nums,int start,int sum) {
        int n = nums.size();
        vector<vector<int>> res;
        for (int i = start; i < n; i++) {
            vector<vector<int>> tuples = twoSum(nums, i + 1, sum - nums[i]);
            if(tuples.size()!=0){
                for (auto tuple : tuples) {
                    tuple.push_back(nums[i]);
                    res.push_back(tuple);
                }
                while (i < n - 1 && nums[i] == nums[i + 1]) i++;
            }
        }
        return res;
    }
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        vector<vector<int> > res;
        for(int i=0;i<n;i++){
            vector<vector<int> > temp=threeSum(nums,i+1,target-nums[i]);
            if(temp.size()!=0){
                for(auto t:temp){
                    t.push_back(nums[i]);
                    res.push_back(t);
                }
                while(i<n-1&&nums[i]==nums[i+1]) i++;
            }
        }
        return res;
        
    }
};
**********************************************************
class Solution {
public:
    // 只需要返回三个数的和,根据15的双指针来改
    int threeSumClosest(vector<int>& nums, int target) {
        int n = nums.size();
        if( n < 3 )
            return NULL;
        if( n == 3 )
            return nums[0]+nums[1] + nums[2];
        // 仍然需要重排
        sort( nums.begin(), nums.end() );
        int minMerge = INT_MAX;
        int ans = 0, tmpSum = 0;
        for( int i = 0; i < n; i++ ){
            // if( i > 0 && nums[i] == nums[i-1] ) 
            //     continue;
            int l = i + 1, h = n - 1;
            while( l < h ){
                tmpSum = nums[i] + nums[l] + nums[h];
                // 只需要加一重判断，然后记录最近的距离和该情况下的三数之和
                // 如果当前距离小于目前最小距离，则需要更新
                if( abs(tmpSum - target) < minMerge ){ 
                        minMerge = abs( tmpSum - target );
                        ans = tmpSum;
                }
                // 然后决定下一步怎么走
                if( tmpSum < target ){ // 首先，tmpSum < target说明右侧可能有更好的结果，必须是像右侧走，l++
                    l++;
                }else if ( tmpSum > target){
                   h--;
                }else{ // 如果已经相等，那么间隔就是0
                    return ans;
                }
            }
        }
        return ans;
    }
};
