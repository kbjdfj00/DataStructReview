****************************************************************************
//两栈实现队列:
class myqueue{
    public:
        myqueue(){};

        void push(int n){
            s1.push(n);
        }

        void pop(){
            if(s2.empty()){
                while(!s1.empty()){
                    auto temp=s1.top();
                    s1.pop();
                    s2.push(temp);
                }
            }
            auto temp1=s2.top();
            s2.pop();
            cout<<temp1<<' ';
        }
    private:
        stack<int> s1;
        stack<int> s2;
};
******************************************************************************
//两队列实现栈：
class mystack{
    public:
    //保持一个队列是空的
        void push(int n){
            if(q1.empty()){
                q2.push(n);
            }else{
                q1.push(n);
            }
        }
        void pop(){
            if(q1.empty()){
                while(q2.size()>1){
                    q1.push(q2.front());
                    q2.pop();
                }
                cout<<q2.front();
                q2.pop();
            }else{
                  while(q1.size()>1){
                    q2.push(q1.front());
                    q1.pop();
                }
                cout<<q1.front();
                q1.pop();
            }
        }

        bool empty(){
            return q1.empty()&&q2.empty();
        }

        int top(){
            if(q1.empty()){
                return q2.back();
            }else{
                return q1.back();
            }
        }
        
    private:
        queue<int> q1;
        queue<int> q2;
};
