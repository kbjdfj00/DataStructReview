****************************************************************************************************
//求字符串的最长回文子串
class Solution {
public:
    string longestPalindrome(string s) {
        string res;
        int len=s.size();
        vector<vector<bool>> dp(len,vector<bool>(len,false));
        for(int l=0;l<len;l++){
            for(int i=0;i+l<len;i++){
                int j=i+l;
                if(l==0){
                    dp[i][j]=true;
                }else if(l==1){
                    dp[i][j]=(s[i]==s[j]);
                }else{
                    dp[i][j]=((s[i]==s[j])&&dp[i+1][j-1]);
                }

                if(dp[i][j]&&l+1>res.size()){
                    res=s.substr(i,l+1);
                }
            }
        }
        return res;
    }
};
****************************************************************************************************
//字符串回文子串的个数：


class Solution {
public:
    int countSubstrings(string s) {
        if (s.empty()) return 0;
        int size = s.size(), res = 0;
        vector<vector<bool>> dp(size, vector<bool>(size));
        for (int i = size - 1; i >= 0; --i) {
            for (int j = i; j < size; ++j) {
                dp[i][j] = (s[i] == s[j]) && (j - i <= 2 || dp[i + 1][j - 1]);
                if (dp[i][j]) ++res;            
            }            
        }
        return res;
    }
};


****************************************************************************************************
//两个字符串s1和s2的最长公共子串

void findMaxCommonStr(string s1,string s2)
{
    if(s1.length()>s2.length())
            swap(s1,s2);//s1用于保存较短的子串
    int len1=s1.length(),len2=s2.length();
    int maxLen=0,start=0;
    vector<vector<int> >dp(len1+1,vector<int>(len2+1,0));
    for(int i=1;i<=len1;++i)
        for(int j=1;j<=len2;++j)
        {
            if(s1[i-1]==s2[j-1])
            {
                dp[i][j]=dp[i-1][j-1]+1;
                if(dp[i][j]>maxLen)
                {
                    maxLen=dp[i][j];
                    start=i-maxLen;//记录最长公共子串的起始位置
                }
            }
        }
   cout<<s1.substr(start,maxLen)<<endl;
}
int main()
{
   string s1,s2;
   while(cin>>s1>>s2)
   {
       findMaxCommonStr(s1,s2);
   }
   return 0;
}
****************************************************************************************************
//两字符串的最长公共子序列
class LCS {
public:
    int findLCS(string A, int n, string B, int m) {
        int dp[n+1][m+1];
        for(int i=0;i<=n;i++)
            dp[i][0]=0;
        for(int j=0;j<=m;j++)
            dp[0][j]=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++){
                if(A[i]==B[j])
                    dp[i+1][j+1]=dp[i][j]+1;
                else
                    dp[i+1][j+1]=max(dp[i+1][j],dp[i][j+1]);
            }    
        }
        return dp[n][m];
    }
};
****************************************************************************************************
