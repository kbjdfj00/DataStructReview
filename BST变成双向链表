//中序遍历之后，再处理：
public static Node2 convert1(Node2 head) {
 2    Queue<Node2> queue = new LinkedList<>();
 3    //将节点按中序遍历放进队列里
 4    inOrderToQueue(head, queue);
 5    head = queue.poll();
 6    Node2 pre = head;
 7    pre.left = null;
 8    Node2 cur = null;
 9    while (!queue.isEmpty()) {
10        cur = queue.poll();
11        pre.right = cur;
12        cur.left = pre;
13        pre = cur;
14    }
15    pre.right = null;
16    return head;
17}
18
19private static void inOrderToQueue(Node2 head, Queue<Node2> queue) {
20    if (head == null) {
21        return;
22    }
23    inOrderToQueue(head.left, queue);
24    queue.offer(head);
25    inOrderToQueue(head.right, queue);
26}

//递归：
public static Node2 conver(Node2 head) {
 2    if (head == null) {
 3        return head;
 4    }
 5    Node2 leftE = conver(head.left);
 6    Node2 rightE = conver(head.right);
 7    Node2 leftB = leftE != null ? leftE.right : null;
 8    Node2 rightB = rightE != null ? rightE.right : null;
 9    if (leftE != null && rightE != null) {
10        leftE.right = head;
11        head.left = leftE;
12        head.right = rightB;
13        rightB.left = head;
14        rightE.right = leftB;
15        return rightE;
16    } else if (leftE != null) {
17        leftE.right = head;
18        head.left = leftE;
19        head.right = leftB;
20        return head;
21    } else if (rightE != null) {
22        head.right = rightB;
23        rightB.left = head;
24        rightE.right = head;
25        return rightE;
26    } else {
27        head.right = head;
28        return head;
29    }
30}
