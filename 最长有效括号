给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。


//维护一个栈，里面保存'('的下标，每次进入一个')'时，栈弹出，ans更新为当前扫描的下标
//与栈顶元素之间的距离(因为中间可能有些括号已经被消掉了)，因为栈可能为空，所以需要
//记录下起始记录点last。
class Solution {
public:
    int longestValidParentheses(string s) {
        int ans=0,last=-1;
        stack<int> st;
        for(int i=0;i<s.size();i++){
            if(s[i]=='(') st.push(i);
            else{
                 if(!st.size()) last=i;
                 else{
                    st.pop();
                    if(st.size()) ans=max(ans,i-st.top());
                    else ans=max(ans,i-last);
                 }
            }
        }
        return ans;
    }
};
//用动态规划做速度更快
class Solution {
public:
    int longestValidParentheses(string s) { 
        int n = s.size(), res = 0;
        vector<int> dp(n + 1, 0);//dp[i]表示以当前位置为终点的最长长度，则只能在）处更新
        dp[0] = dp[1] = 0;
        for(int i = 2; i <= n; i++){
            if(s[i - 1] == ')'){
                //如果s[i-2-dp[i-1]]=='('，则说明当前位置可以和i-2-dp[i-1]位置匹配，dp[i]=dp[i-1]+2
                if(s[i - 2 - dp[i - 1]] == '(') dp[i] = dp[i - 1] + 2;
                dp[i] += dp[i - dp[i]];//还要加上匹配位置之前的最长长度dp[i]+=dp[i-dp[i]]
            }   
            res = max(res, dp[i]);
        }
        return res;
    }
};
