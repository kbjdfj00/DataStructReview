******************************************************************************************************
//3种递归：
******************************************************************************************************
//前序：
void preOrder(TreeNode* root){
        if(root == NULL){
            return;
        }
        cout<<root->val;
        preOrder(root.left);
        preOrder(root.right);
}
******************************************************************************************************
//中序：
void inOrder(TreeNode* root){
        if(root == NULL){
            return;
        }
        inOrder(root.left);
        cout<<root->val;
        inOrder(root.right);
}
******************************************************************************************************
//后序：
void postOrder(TreeNode* root){
        if(root == NULL){
            return;
        }
        postOrder(root.left);
        postOrder(root.right);
        cout<<root->val;
}
******************************************************************************************************
//3种非递归：
******************************************************************************************************
//前序：
void preOrder(TreeNode* root){
	if(root==NULL){
		return;
	}
	stack<TreeNode*> s;
	auto temp=root;
	s.push(temp);
	while(!s.empty()){
		temp=s.top();
		cout<<temp->val<<' ';
		s.pop();
		if(temp->right){
			s.push(temp->right);
		}
		if(temp->left){
			s.push(temp->left);
		}
	}
}
******************************************************************************************************
//中序：
void inOrder(TreeNode* root){
	if(root==NULL){
		return;
	}
	stack<TreeNode*> s;
	auto temp=root;
	while(temp||!s.empty()){
		while(temp){
			s.push(temp);
			temp=temp->left;
		}
		if(!s.empty())
		{
			temp=s.top();
			s.pop();
			cout<<temp->val<<' ';
			temp=temp->right;
		}
	}
}
******************************************************************************************************
//后序：
void postOrder(TreeNode* root){
	stack<TreeNode*> s;
	TreeNode* temp = root;
	TreeNode* lastVisit =NULL;   
	while( temp!=NULL || !s.empty()){
		while( temp!=NULL){
			s.push( temp);
			temp=temp->left;
		}
		if(!s.empty()){
			 temp = s.top();
			 s.pop();
			if( temp->right == NULL ||  temp->right == lastVisit) {
				cout<<temp->val<<' ';
				lastVisit =  temp;
				 temp  = NULL;
			}else{
				s.push( temp);
				 temp =  temp->right;
			}
		}
    }
}
******************************************************************************************************
//层序遍历：
void levelOrder(TreeNode* root){
	queue<TreeNode*> q;
	q.push(root);
	while(!q.empty()){
		TreeNode* temp=q.front();
		cout<<temp->val<<' ';
		q.pop();
		if(temp->left){
			q.push(temp->left);
		}
		if(temp->right){
			q.push(temp->right);
		}
	}
}

