
class Solution {
public:

    unordered_map<int,int> dict;

    int superEggDrop(int K, int N) {
        return DP(K,N);
    }

private:
    int DP(int k,int n){
        if(n==0) return 0;
        if(k==1) return n;
        if(dict.find(n*100+k)!=dict.end())
            return dict[n*100+k];
        
        int res=1000;
        int left=1,right=n;
        while(left<=right)
        {   
            int mid=(left+right)/2;
            int broken=DP(k-1,mid-1);
            int unbroken=DP(k,n-mid);
            if(broken>unbroken){
                right=mid-1;
                res=min(res,broken+1);
            }else{
                left=mid+1;
                res=min(res,unbroken+1);
            }
        }
        dict[n*100+k]=res;
        return res;
    }
};


/*class Solution {
    unordered_map<int, int> memo;
    int dp(int K, int N) {
        if (memo.find(N * 100 + K) == memo.end()) {
            int ans;
            if (N == 0) ans = 0;
            else if (K == 1) ans = N;
            else {
                int lo = 1, hi = N;
                while (lo + 1 < hi) {
                    int x = (lo + hi) / 2;
                    int t1 = dp(K-1, x-1);
                    int t2 = dp(K, N-x);

                    if (t1 < t2) lo = x;
                    else if (t1 > t2) hi = x;
                    else lo = hi = x;
                }

                ans = 1 + min(max(dp(K-1, lo-1), dp(K, N-lo)),
                                   max(dp(K-1, hi-1), dp(K, N-hi)));
            }

            memo[N * 100 + K] = ans;
        }

        return memo[N * 100 + K];
    }
public:
    int superEggDrop(int K, int N) {
        return dp(K, N);
    }
};*/
