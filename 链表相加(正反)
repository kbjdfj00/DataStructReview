***********************************************************************
//(2 -> 4 -> 3) + (5 -> 6 -> 4)
//输出：7 -> 0 -> 8
//原因：342 + 465 = 807
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        // 特殊情况判断，如果只有一位且是0，就返回另一个链表（也可不做这个判断）
        if(l1->val==0 && !l1->next) return l2; 
        if(l2->val==0 && !l2->next) return l1;

        ListNode *dummyHead = new ListNode(10086); // 添加一个虚拟头结点，赋值10086～
        ListNode *pointer = dummyHead; // 创造一个工作指针，指向新添加的头结点
        int carry = 0; // carry表示进位
        while(l1 || l2)
        {
            int v1 = l1 ? l1->val : 0; // 如果l1非空，让v1=l1->val，否则等于0
            int v2 = l2 ? l2->val : 0;
            int sum = v1 + v2 + carry;
            carry = sum / 10;
            pointer -> next = new ListNode(sum % 10);
            pointer = pointer -> next;
            if(l1) l1 = l1 -> next;
            if(l2) l2 = l2 -> next;
        }
        if(carry) pointer -> next = new ListNode(1); // 如果到了最后carry不是0，说明最后一位相加之后还有进位，再添加一个新的结点
        return dummyHead -> next;
    }
};

***********************************************************************************************
//存放顺序反的：
//用栈：
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1->val==0 && !l1->next) return l2;
        if(l2->val==0 && !l2->next) return l1;
        stack<int> s1, s2;
        while(l1)
        {
            s1.push(l1 -> val);
            l1 = l1 -> next;
        }
        while(l2)
        {
            s2.push(l2 -> val);
            l2 = l2 -> next;
        }
        int carry = 0;
        ListNode *pos = nullptr;
        while(!s1.empty() || !s2.empty() || carry)
        {
            int v1 = s1.empty() ? 0 : s1.top();
            int v2 = s2.empty() ? 0 : s2.top();
            if(!s1.empty()) s1.pop();
            if(!s2.empty()) s2.pop();
            int sum = v1 + v2 + carry;
            carry = sum / 10;
            ListNode *temp = new ListNode(sum % 10);
            temp -> next = pos; // 此处用了头插法（新元素往前放）
            pos = temp;
        }
        return pos;
    }
};
