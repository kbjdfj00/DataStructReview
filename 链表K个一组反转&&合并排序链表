 ****************************************************************************************************
 //链表K个一组反转：
 /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(!head||!head->next||k==1)    return head;
        ListNode* hair=new ListNode(0);//头节点
        hair->next=head;
        auto pre=hair;
        auto cur=hair;
        while(cur){
            for(int i=0;i<k&&cur;i++){
                cur=cur->next;
            }
            if(!cur) return hair->next;
            auto temp1=pre->next;
            auto temp2=cur->next;
            cur->next=NULL;  //断开
            pre->next=reverseOneList(temp1);
            temp1->next=temp2;
            pre=temp1;
            cur=pre;
        }
        return hair->next;
    }


    //反转链表的函数
     ListNode *reverseOneList(ListNode *head)
    {
        if(!head || !head->next) return head;
        ListNode *prev = nullptr, *curr = head;
        while(curr)
        {
            ListNode *nextptr = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = nextptr;
        }
        return prev;
    }
};
*********************************************************************************************
//合并链表：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL) return l2;
        if(l2==NULL) return l1;
        ListNode* head=NULL;
        if(l1->val<=l2->val){
            head=l1;
            l1=l1->next;
        }else{
            head=l2;
            l2=l2->next;
        }
        auto temp=head;
        while(l1!=NULL&&l2!=NULL){
            if(l1->val<=l2->val){
                temp->next=l1;
                temp=temp->next;
                l1=l1->next;
            }else{
                temp->next=l2;
                temp=temp->next;
                l2=l2->next;
            }
        }
        if(l1!=NULL) temp->next=l1;
        if(l2!=NULL) temp->next=l2;
        return head;
    }
};
********************************************************************************************************
//K个链表合并:
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0) return NULL;
        auto temp=lists[0];
        for(int i=1;i<lists.size();i++){
            temp=Merge(temp,lists[i]);
        }
        return temp;

    }


     ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        ListNode* p=new ListNode(-1);
        auto temp=p;
        while(pHead1!=NULL && pHead2!=NULL ){
            if(pHead1->val <= pHead2->val){
                temp->next=pHead1;
                pHead1=pHead1->next;
            }else{
                 temp->next=pHead2;
                 pHead2=pHead2->next;
                 }
            temp=temp->next;
        }
        if(pHead1!=NULL) temp->next=pHead1;
        if(pHead2!=NULL) temp->next=pHead2;
        return p->next;
    }
};
