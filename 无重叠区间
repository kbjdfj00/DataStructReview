先按每段的开始排序，在用DP
class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& num) {
        if(num.size()==0) return 0;
        sort(num.begin(),num.end());
        vector<int> dp(num.size(),0);
        dp[0]=1;
        int res=1;
        for(int i=1;i<num.size();i++){
            int maxn=0;
            for(int j=i-1;j>=0;j--){
                if(num[j][1]<=num[i][0]){
                    maxn=max(maxn,dp[j]);
                }
            }
            dp[i]=maxn+1;
            res=max(res,dp[i]);
        }
        return num.size()-res;
    }
};


或者用贪心算法
class Solution {
public:
    static bool cmp(vector<int>& a,vector<int>& b){
        return a[1]<b[1];
    }
    int eraseOverlapIntervals(vector<vector<int>>& num) {
        if(num.size()==0) return 0;

        sort(num.begin(),num.end(),cmp);
        int res=0;
        int end=num[0][1];
        for(int i=1;i<num.size();i++){
            if(num[i][0]<end){
                res++;
            }else{
                end=num[i][1];
            }
        }
        
        return res;
    }
};
